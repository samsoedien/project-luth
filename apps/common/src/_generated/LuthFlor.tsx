/*
  Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@7.1.3 ./public/Body_Sides_Florentine_Cutaway.glb --transform --types --keepnames --keepmeshes --draco --meta --shadows --exportdefault --instanceall --output ./src/_generated/LuthFlor.tsx 
*/

import {
  useAnimations,
  useGLTF,
  Merged,
  PerspectiveCamera,
  OrthographicCamera,
} from '@react-three/drei'
import { GroupProps, MeshProps, useGraph } from '@react-three/fiber'
import * as React from 'react'
import { AnimationClip, Material, Mesh, MeshPhysicalMaterial, MeshStandardMaterial } from 'three'
import { GLTF, SkeletonUtils } from 'three-stdlib'

interface LuthFlorGLTF extends GLTF {
  materials: { ['Body_Sides_Florentine_Cutaway.001_Baked']: MeshStandardMaterial }
  nodes: {
    Body_Sides_Florentine_Cutaway001_Baked: Mesh
  }
}

export interface LuthFlorProps extends GroupProps {}

const modelLoadPath = 'Body_Sides_Florentine_Cutaway.glb'
const draco = true

type ContextType = Record<string, React.ForwardRefExoticComponent<MeshProps>>

const context = React.createContext<ContextType>({})

export function LuthFlorInstances({ children, ...props }: LuthFlorProps) {
  const { nodes } = useGLTF(modelLoadPath, draco) as LuthFlorGLTF
  const instances = React.useMemo(
    () => ({
      Body_Sides_Florentine_Cutaway_Baked: nodes.Body_Sides_Florentine_Cutaway001_Baked,
    }),
    [nodes],
  )
  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => <context.Provider value={instances} children={children} />}
    </Merged>
  )
}

export function LuthFlor(props: LuthFlorProps) {
  const instances = React.useContext(context)

  return (
    <group {...props} dispose={null}>
      <instances.Body_Sides_Florentine_Cutaway_Baked
        name="Body_Sides_Florentine_Cutaway001_Baked"
        castShadow
        receiveShadow
        userData={{ name: 'Body_Sides_Florentine_Cutaway.001_Baked' }}
      />
    </group>
  )
}

useGLTF.preload(modelLoadPath, draco)
