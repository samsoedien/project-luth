/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/Saddle_Collection.glb --types --transform --instanceall --keepmeshes --keepmaterials --keepattributes --keepnames --draco --meta --shadows --exportdefault --output ./src/_generated/LuthSaddle.tsx 
Files: ./public/Saddle_Collection.glb [8.95KB] > /Users/samsoedien/Documents/Repositories/project-luth/apps/common/src/_generated/Saddle_Collection-transformed.glb [2.26KB] (75%)
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF, Merged } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

export type GLTFResult = GLTF & {
  nodes: {
    Body_Saddle: THREE.Mesh
  }
  materials: {
    F_4f4110690a9740babbdc9f0aa5374e40: THREE.MeshPhysicalMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

const context = React.createContext({} as ContextType)

export function Instances({ children, ...props }: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('/Saddle_Collection-transformed.glb') as GLTFResult
  const instances = React.useMemo(
    () => ({
      BodySaddle: nodes.Body_Saddle,
    }),
    [nodes],
  )
  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => <context.Provider value={instances} children={children} />}
    </Merged>
  )
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const instances = React.useContext(context)
  return (
    <group {...props} dispose={null}>
      <instances.BodySaddle name="Body_Saddle" userData={{ name: 'Body_Saddle' }} />
    </group>
  )
}

useGLTF.preload('/Saddle_Collection-transformed.glb')
