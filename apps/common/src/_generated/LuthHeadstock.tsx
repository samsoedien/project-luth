/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/Headstock_Collection.glb --types --transform --instanceall --keepmeshes --keepmaterials --keepattributes --keepnames --draco --meta --shadows --exportdefault --output ./src/_generated/LuthHeadstock.tsx 
Files: ./public/Headstock_Collection.glb [511.54KB] > /Users/samsoedien/Documents/Repositories/project-luth/apps/common/src/_generated/Headstock_Collection-transformed.glb [72.93KB] (86%)
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF, Merged } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

export type GLTFResult = GLTF & {
  nodes: {
    Peg_Head: THREE.Mesh
    Peg_Head_Tuner_Right: THREE.Mesh
    Peg_Head005: THREE.Mesh
    Peg_Head_Tuner_Right005: THREE.Mesh
    Body_Headstock: THREE.Mesh
    Peg_Head001: THREE.Mesh
    Peg_Head_Tuner_Right001: THREE.Mesh
    Peg_Head002: THREE.Mesh
    Peg_Head_Tuner_Right002: THREE.Mesh
    Peg_Head003: THREE.Mesh
    Peg_Head_Tuner_Right003: THREE.Mesh
    Peg_Head004: THREE.Mesh
    Peg_Head_Tuner_Right004: THREE.Mesh
  }
  materials: {
    ['F_2b5120976f29425f8eb5ad1c67776a2e.004']: THREE.MeshPhysicalMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

const context = React.createContext({} as ContextType)

export function Instances({ children, ...props }: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('/Headstock_Collection-transformed.glb') as GLTFResult
  const instances = React.useMemo(
    () => ({
      PegHead: nodes.Peg_Head,
      PegHeadTunerRight: nodes.Peg_Head_Tuner_Right,
      PegHead1: nodes.Peg_Head005,
      PegHeadTunerRight1: nodes.Peg_Head_Tuner_Right005,
      BodyHeadstock: nodes.Body_Headstock,
      PegHead2: nodes.Peg_Head001,
      PegHeadTunerRight2: nodes.Peg_Head_Tuner_Right001,
      PegHead3: nodes.Peg_Head002,
      PegHeadTunerRight3: nodes.Peg_Head_Tuner_Right002,
      PegHead4: nodes.Peg_Head003,
      PegHeadTunerRight4: nodes.Peg_Head_Tuner_Right003,
      PegHead5: nodes.Peg_Head004,
      PegHeadTunerRight5: nodes.Peg_Head_Tuner_Right004,
    }),
    [nodes],
  )
  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => <context.Provider value={instances} children={children} />}
    </Merged>
  )
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const instances = React.useContext(context)
  return (
    <group {...props} dispose={null}>
      <instances.PegHead name="Peg_Head" userData={{ name: 'Peg_Head' }} />
      <instances.PegHeadTunerRight name="Peg_Head_Tuner_Right" userData={{ name: 'Peg_Head_Tuner_Right' }} />
      <instances.PegHead1 name="Peg_Head005" userData={{ name: 'Peg_Head.005' }} />
      <instances.PegHeadTunerRight1 name="Peg_Head_Tuner_Right005" userData={{ name: 'Peg_Head_Tuner_Right.005' }} />
      <instances.BodyHeadstock name="Body_Headstock" userData={{ name: 'Body_Headstock' }} />
      <instances.PegHead2 name="Peg_Head001" userData={{ name: 'Peg_Head.001' }} />
      <instances.PegHeadTunerRight2 name="Peg_Head_Tuner_Right001" userData={{ name: 'Peg_Head_Tuner_Right.001' }} />
      <instances.PegHead3 name="Peg_Head002" userData={{ name: 'Peg_Head.002' }} />
      <instances.PegHeadTunerRight3 name="Peg_Head_Tuner_Right002" userData={{ name: 'Peg_Head_Tuner_Right.002' }} />
      <instances.PegHead4 name="Peg_Head003" userData={{ name: 'Peg_Head.003' }} />
      <instances.PegHeadTunerRight4 name="Peg_Head_Tuner_Right003" userData={{ name: 'Peg_Head_Tuner_Right.003' }} />
      <instances.PegHead5 name="Peg_Head004" userData={{ name: 'Peg_Head.004' }} />
      <instances.PegHeadTunerRight5 name="Peg_Head_Tuner_Right004" userData={{ name: 'Peg_Head_Tuner_Right.004' }} />
    </group>
  )
}

useGLTF.preload('/Headstock_Collection-transformed.glb')
