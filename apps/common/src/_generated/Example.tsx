/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 ./public/model.glb --types --transform --keepnames --keepmeshes --exportdefault --instanceall --output ./src/_generated/LuthAcousticDreadnaught.tsx 
Files: ./public/model.glb [26.77MB] > /Users/samsoedien/Documents/Repositories/project-luth/apps/common/src/_generated/model.glb [1.73MB] (94%)
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF, Merged } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    ParentBody1: THREE.Mesh
    ParentBody2: THREE.Mesh
    ChildBody3: THREE.Mesh
  }
  materials: {
    ['Material']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

const context = React.createContext({} as ContextType)

export function Instances({ children, ...props }: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('/model.glb') as GLTFResult
  const instances = React.useMemo(
    () => ({
      ParentBody1: nodes.ParentBody1,
      ParentBody2: nodes.ParentBody2,
      ChildBody3: nodes.ChildBody3,
    }),
    [nodes],
  )
  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => <context.Provider value={instances} children={children} />}
    </Merged>
  )
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const instances = React.useContext(context)

  return (
    <group {...props} dispose={null}>
      <instances.ParentBody1 name="ParentBody1" scale={0.001} />
      <instances.ParentBody2 name="ParentBody2" scale={0.001} />
      <instances.ChildBody3 name="ChildBody3" scale={0.001} />
    </group>
  )
}

useGLTF.preload('/model.glb')
