/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/Braces_Collection.glb --types --transform --instanceall --keepmeshes --keepmaterials --keepattributes --keepnames --draco --meta --shadows --exportdefault --output ./src/_generated/LuthBraces.tsx 
Files: ./public/Braces_Collection.glb [242.9KB] > /Users/samsoedien/Documents/Repositories/project-luth/apps/common/src/_generated/Braces_Collection-transformed.glb [35.84KB] (85%)
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF, Merged } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

export type GLTFResult = GLTF & {
  nodes: {
    Body_Brace_Fretboard_Reinforcement_Left: THREE.Mesh
    Body_Brace_Fretboard_Reinforcement_Right: THREE.Mesh
    Body_BraceD: THREE.Mesh
    Body_BraceE: THREE.Mesh
    Body_BraceF_Left: THREE.Mesh
    Body_BraceF_Right: THREE.Mesh
    Body_BraceG_Left: THREE.Mesh
    Body_BraceG_Right: THREE.Mesh
    Body_BraceH_Left: THREE.Mesh
    Body_BraceH_Right: THREE.Mesh
    Body_Bridge_Plate: THREE.Mesh
    Body_Lateral_BraceA: THREE.Mesh
    Body_X_BraceB: THREE.Mesh
    Body_X_BraceC: THREE.Mesh
  }
  materials: {
    ['F_49bd318f4db04724b3dfc775ea613314.003']: THREE.MeshPhysicalMaterial
  }
  animations: GLTFAction[]
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

const context = React.createContext({} as ContextType)

export function Instances({ children, ...props }: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('/Braces_Collection-transformed.glb') as GLTFResult
  const instances = React.useMemo(
    () => ({
      BodyBraceFretboardReinforcementLeft: nodes.Body_Brace_Fretboard_Reinforcement_Left,
      BodyBraceFretboardReinforcementRight: nodes.Body_Brace_Fretboard_Reinforcement_Right,
      BodyBraceD: nodes.Body_BraceD,
      BodyBraceE: nodes.Body_BraceE,
      BodyBraceFLeft: nodes.Body_BraceF_Left,
      BodyBraceFRight: nodes.Body_BraceF_Right,
      BodyBraceGLeft: nodes.Body_BraceG_Left,
      BodyBraceGRight: nodes.Body_BraceG_Right,
      BodyBraceHLeft: nodes.Body_BraceH_Left,
      BodyBraceHRight: nodes.Body_BraceH_Right,
      BodyBridgePlate: nodes.Body_Bridge_Plate,
      BodyLateralBraceA: nodes.Body_Lateral_BraceA,
      BodyXBraceB: nodes.Body_X_BraceB,
      BodyXBraceC: nodes.Body_X_BraceC,
    }),
    [nodes],
  )
  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => <context.Provider value={instances} children={children} />}
    </Merged>
  )
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const instances = React.useContext(context)
  return (
    <group {...props} dispose={null}>
      <instances.BodyBraceFretboardReinforcementLeft name="Body_Brace_Fretboard_Reinforcement_Left" userData={{ name: 'Body_Brace_Fretboard_Reinforcement_Left' }} />
      <instances.BodyBraceFretboardReinforcementRight name="Body_Brace_Fretboard_Reinforcement_Right" userData={{ name: 'Body_Brace_Fretboard_Reinforcement_Right' }} />
      <instances.BodyBraceD name="Body_BraceD" userData={{ name: 'Body_BraceD' }} />
      <instances.BodyBraceE name="Body_BraceE" userData={{ name: 'Body_BraceE' }} />
      <instances.BodyBraceFLeft name="Body_BraceF_Left" userData={{ name: 'Body_BraceF_Left' }} />
      <instances.BodyBraceFRight name="Body_BraceF_Right" userData={{ name: 'Body_BraceF_Right' }} />
      <instances.BodyBraceGLeft name="Body_BraceG_Left" userData={{ name: 'Body_BraceG_Left' }} />
      <instances.BodyBraceGRight name="Body_BraceG_Right" userData={{ name: 'Body_BraceG_Right' }} />
      <instances.BodyBraceHLeft name="Body_BraceH_Left" userData={{ name: 'Body_BraceH_Left' }} />
      <instances.BodyBraceHRight name="Body_BraceH_Right" userData={{ name: 'Body_BraceH_Right' }} />
      <instances.BodyBridgePlate name="Body_Bridge_Plate" userData={{ name: 'Body_Bridge_Plate' }} />
      <instances.BodyLateralBraceA name="Body_Lateral_BraceA" userData={{ name: 'Body_Lateral_BraceA' }} />
      <instances.BodyXBraceB name="Body_X_BraceB" userData={{ name: 'Body_X_BraceB' }} />
      <instances.BodyXBraceC name="Body_X_BraceC" userData={{ name: 'Body_X_BraceC' }} />
    </group>
  )
}

useGLTF.preload('/Braces_Collection-transformed.glb')
